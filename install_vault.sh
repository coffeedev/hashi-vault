#!/usr/bin/env bash
# Source : https://github.com/btkrausen/hashicorp/tree/master/vault/scripts
# Customized by Guruprasad Belthur for RaspberryPI install

# get the latest list from this path : https://releases.hashicorp.com/vault/

set -euxo pipefail

# Variables
VAULT_VERSION=1.13.1
IP_ADDRESS=$(/sbin/ip -o -4 addr list wlan0 | awk '{print $4}' | cut -d/ -f1)
# Remove license information if using open source
#VAULT_LICENSE=<ENTER LICENSE HERE>

# Create Prerequisites
echo "Creating System Prerequisites"

echo "Installing jq"
sudo apt-get install -y jq

echo "Installing unzip"
sudo apt-get install -y unzip

echo "Clean up"

systemctl stop vault.service || true
systemctl disable vault.service || true
sleep 2

rm -rf /etc/vault || true
rm /etc/systemd/system/vault.service || true
#Comment this line if you want to save the data from the previous install. 
#Ensure you have the unseal keys and token in a safe place
rm -rf /opt/vault || true


echo "Adding Vault system users"
create_ids() {
  sudo /usr/sbin/groupadd --force --system ${1}
  if ! getent passwd ${1} >/dev/null ; then
    sudo /usr/sbin/adduser \
      --system \
      --gid ${1} \
      --home /srv/${1} \
      --no-create-home \
      --comment "${1} account" \
      --shell /bin/false \
      ${1}  >/dev/null
  fi
}

create_ids vault

# echo "Download and Install Vault version ${VAULT_VERSION}"
# Update variables above to manage version, OSS/Ent, and platform
export VAULT_ARCHIVE="vault_${VAULT_VERSION}_linux_arm64.zip"
echo "Installing Vault for RaspberryPI"
curl -Lo /tmp/${VAULT_ARCHIVE} https://releases.hashicorp.com/vault/${VAULT_VERSION}/${VAULT_ARCHIVE}
sudo unzip -o -d /usr/local/bin /tmp/${VAULT_ARCHIVE}

# Create and manage permissions on directories
echo "Configuring HashiCorp directories"
directory_setup() {
  sudo mkdir -pm 0755 /etc/${1} /var/lib/${1} /opt/${1}/data 
  sudo mkdir -pm 0755 /opt/${1}/tls
  sudo chown -R ${2}:${2} /etc/${1} /opt/${1}/data /opt/${1}/tls
    
}

directory_setup vault vault

echo "Creating the key, in /etc/vault/tls & set the folder permissions to vault"

pushd .

cd /opt/vault/tls

openssl req -out tls.crt  -new -keyout tls.key -newkey rsa:4096 -nodes -sha256 -x509 -subj "/O=HashiCorp/CN=Vault" -addext "subjectAltName = IP:$IP_ADDRESS,DNS:pidev.local	" -days 3650

sudo chown -R vault:vault /opt/vault/tls/* 

popd

# Create Vault Configuration file
# Remove license reference information if using Vault OSS

# client.pem and cert.key are generated by your trusted certificate authority
# They represent the TLS certificate and private key for the Vault node
# Create cert using node name with additional SAN(s) for friendly name(s) of Vault

echo "Creating Vault Configuration file"

#remove previous ones, if any

cat <<-EOF > /etc/vault/vault.hcl

ui            = true
cluster_addr  = "https://$IP_ADDRESS:8201"
api_addr      = "https://$IP_ADDRESS:8200"
disable_mlock = true
log_level     = "INFO"


storage "raft" {
  path    = "/opt/vault/data"
  performance_multiplier = 1
}

listener "tcp" {
  address       = "$IP_ADDRESS:8200"
  tls_cert_file = "/opt/vault/tls/tls.crt"
  tls_key_file  = "/opt/vault/tls/tls.key"
}

EOF


echo "Create systemd service file"

# Create Systemd file
echo '[Unit]
Description="HashiCorp Vault - A tool for managing secrets"
Documentation=https://www.vaultproject.io/docs/
Requires=network-online.target
After=network-online.target
ConditionFileNotEmpty=/etc/vault/vault.hcl

[Service]
User=vault
Group=vault

# Sandboxing settings to improve the security of the host by restricting vault privileges and access
ProtectSystem=true
ProtectSystem=full
ProtectHome=read-only
PrivateTmp=yes
PrivateDevices=yes

# Configure the capabilities of the vault process, particularly to lock memory.
# (support for multiple systemd versions)
SecureBits=keep-caps
AmbientCapabilities=CAP_IPC_LOCK
#Capabilities=CAP_IPC_LOCK+ep
CapabilityBoundingSet=CAP_SYSLOG CAP_IPC_LOCK

# Limit the number of file descriptors to the configured value and prevent memory being swapped to disk
LimitNOFILE=65536
LimitMEMLOCK=infinity

# Prevent vault and any child process from gaining new privileges
NoNewPrivileges=yes

ExecStart=/usr/local/bin/vault server -config=/etc/vault/vault.hcl
ExecReload=kill --signal HUP $MAINPID
KillMode=process
KillSignal=SIGINT
Restart=on-failure
RestartSec=5
TimeoutStopSec=30
StartLimitBurst=3

[Install]
WantedBy=multi-user.target' >> /etc/systemd/system/vault.service


echo "Setting the service file"
sudo chmod 0664 /etc/systemd/system/vault.service
sudo systemctl daemon-reload

sleep 5

sudo systemctl enable vault.service
sudo systemctl start vault.service

sleep 5
sudo systemctl status vault.service --no-pager


# Create Vault License file
echo "Creating Vault License file"

#echo $VAULT_LICENSE > /etc/vault/vault.hclic

# Cleanup
sudo rm /tmp/$VAULT_ARCHIVE

exit 0
